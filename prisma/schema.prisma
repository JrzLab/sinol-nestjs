// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id         Int           @id @default(autoincrement()) // Automatically increment the value when a new record is created
  firstName  String        @db.VarChar(255)
  lastName   String?       @db.VarChar(255)
  email      String        @unique @db.VarChar(255)
  password   String?       @db.VarChar(255)
  tokenReset String?       @db.VarChar(400)
  imageUrl   String?       @db.VarChar(255)
  createdAt  DateTime      @default(now()) // Automatically set the current date and time when a new record is created
  message    messageData[]
  roomChatA  roomChat[]    @relation("userA")
  roomChatB  roomChat[]    @relation("userB")
  userClass  userClass[]
}

model roomChat {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  expiredAt DateTime?
  userA     user          @relation("userA", fields: [userAId], references: [id])
  userB     user          @relation("userB", fields: [userBId], references: [id])
  userAId   Int
  userBId   Int
  messages  messageData[]
}

model messageData {
  uid         String   @id @default(uuid())
  roomChat    roomChat @relation(fields: [roomChatId], references: [id])
  roomChatId  Int
  sender      user     @relation(fields: [senderId], references: [id])
  senderId    Int
  content     String   @db.Text()
  messageTemp DateTime @default(now())
}

// This is for the group class

model userClass {
  uid       String     @id @default(uuid())
  user      user       @relation(fields: [userId], references: [id])
  userId    Int
  class     groupClass @relation(fields: [classId], references: [id])
  classId   Int
  createdAt DateTime   @default(now())
  fileTask  fileTask[]
}

model userTask {
  id         Int        @id @default(autoincrement())
  fileTask   fileTask   @relation(fields: [fileTaskId], references: [id])
  fileTaskId Int
  status     taskStatus
  createdAt  DateTime   @default(now())
  editedAt   DateTime   @updatedAt
}

model classSubject {
  id           Int        @id @default(autoincrement())
  title        String     @db.VarChar(255)
  discription  String     @db.Text()
  createdAt    DateTime   @default(now())
  editedAt     DateTime   @updatedAt
  groupClass   groupClass @relation(fields: [groupClassId], references: [id])
  groupClassId Int
}

model groupClass {
  id           Int            @id @default(autoincrement())
  className    String         @db.VarChar(255)
  discription  String         @db.VarChar(255)
  userClass    userClass[]
  classSubject classSubject[]
}

model fileTask {
  id           Int        @id @default(autoincrement())
  fileName     String     @db.VarChar(255)
  userClass    userClass  @relation(fields: [userClassUid], references: [uid])
  userClassUid String
  userTask     userTask[]
}

enum taskStatus {
  NOT_COLLECTING
  LATE
  PENDING
  COMPLATE
}
