// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id         Int           @id @default(autoincrement()) // Automatically increment the value when a new record is created
  firstName  String        @db.VarChar(255)
  lastName   String?       @db.VarChar(255)
  email      String        @unique @db.VarChar(255)
  password   String?       @db.VarChar(255)
  tokenReset String?       @db.VarChar(400)
  imageUrl   String?       @db.VarChar(255)
  createdAt  DateTime      @default(now()) // Automatically set the current date and time when a new record is created
  message    messageData[]
  roomChatA  roomChat[]    @relation("userA")
  roomChatB  roomChat[]    @relation("userB")
  userClass  userClass?
  userTask   userTask[]
  groupClass groupClass[]
}

model roomChat {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  expiredAt DateTime?
  userA     user          @relation("userA", fields: [userAId], references: [id])
  userB     user          @relation("userB", fields: [userBId], references: [id])
  userAId   Int
  userBId   Int
  messages  messageData[]
}

model messageData {
  uid         String   @id @default(uuid())
  content     String   @db.Text()
  messageTemp DateTime @default(now())
  roomChat    roomChat @relation(fields: [roomChatId], references: [id])
  roomChatId  Int
  sender      user     @relation(fields: [senderId], references: [id])
  senderId    Int
}

// This is for the group class

model userClass {
  uid       String      @id @default(uuid())
  createdAt DateTime    @default(now())
  user      user        @relation(fields: [userId], references: [id])
  userId    Int         @unique
  joinClass joinClass[]
}

model userTask {
  id             Int          @id @default(autoincrement())
  score          Int          @default(0)
  status         taskStatus   @default(PENDING)
  createdAt      DateTime     @default(now())
  editedAt       DateTime     @updatedAt
  user           user         @relation(fields: [userId], references: [id])
  userId         Int
  classSubject   classSubject @relation(fields: [classSubjectId], references: [id])
  classSubjectId Int
  fileTask       fileTask[]
}

model classSubject {
  id            Int         @id @default(autoincrement())
  title         String      @db.VarChar(255)
  description   String      @db.Text()
  createdAt     DateTime    @default(now())
  editedAt      DateTime    @updatedAt
  dueDateAt     DateTime
  maxScore      Int
  status        statusClass @default(OPEN)
  groupClass    groupClass  @relation(fields: [groupClassUid], references: [uid])
  groupClassUid String
  userTask      userTask[]
}

model groupClass {
  uid          String         @id @default(uuid())
  className    String         @db.VarChar(255)
  description  String         @db.VarChar(255)
  day          Int            @db.Int
  createdAt    DateTime       @default(now())
  owner        user           @relation(fields: [ownerId], references: [id])
  ownerId      Int
  classSubject classSubject[]
  joinClass    joinClass[]
}

model joinClass {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  userClass     userClass  @relation(fields: [userClassUid], references: [uid])
  userClassUid  String
  groupClass    groupClass @relation(fields: [groupClassUid], references: [uid])
  groupClassUid String
}

model fileTask {
  id         Int      @id @default(autoincrement())
  fileName   String   @db.VarChar(255)
  url        String   @db.VarChar(255)
  userTask   userTask @relation(fields: [userTaskId], references: [id])
  userTaskId Int
}

enum taskStatus {
  NOT_COLLECTING
  LATE
  PENDING
  COMPLATE
}

enum statusClass {
  OPEN
  CLOSED
}
